author:
  - "rooney"

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency:

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: [].
  build-tags: []

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    - src/external_libs
    - autogenerated_by_my_lib

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: true

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files: []

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  go: '1.19'

# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true

# All available settings of specific linters.
linters-settings:
  # Reference: https://golangci-lint:run/usage/linters/
  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
#      - prefix(github.com/org/project) # Custom section: groups all imports with the specified Prefix.
#      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
    # Skip generated files.
    # Default: true
    skip-generated: true
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    enabled-checks:
      - badRegexp # https://go-critic.com/overview#badRegexp-ref
      - builtinShadowDecl # https://go-critic.com/overview#builtinShadowDecl-ref
      - commentedOutCode # https://go-critic.com/overview#commentedOutCode-ref
      - regexpPattern # https://go-critic.com/overview#regexpPattern-ref
      - sqlQuery # https://go-critic.com/overview#sqlQuery-ref
      - truncateCmp # https://go-critic.com/overview#truncateCmp-ref

  linters-settings:
    godot:
      # Comments to be checked: `declarations`, `toplevel`, or `all`.
      # Default: declarations
      scope: all
      # Check that each sentence ends with a period.
      # Default: true
      period: false

    gofmt:
      # Simplify code: gofmt with `-s` option.
      # Default: true
      simplify: false

    importas:
      # Do not allow unaliased imports of aliased packages.
      # Default: false
      no-unaliased: true

    whitespace:
      # Enforces newlines (or comments) after every multi-line function signature.
      # Default: false
      multi-func: true

linters:
  # Disable all linters.
  # Default: false
  disable-all: false

  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    # Enabled by Default
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    # Disabled by Default
    - bidichk
    - bodyclose
    - durationcheck
    - errchkjson
    - errname
    - errorlint
    - gci
    - gocritic
    - godot
    - gofmt
    - goimports
    - gosec
    - importas
    - nilerr
    - nlreturn
    - nosprintfhostport
    - predeclared
    - reassign
#    - revive # postpone until all options are checked
#    - rowserrcheck
#    - sqlclosecheck
    - tenv
    - thelper
    - unconvert
    - unparam
    - usestdlibvars
#    - wastedassign
    - whitespace
    - wrapcheck

  # Enable all available linters.
  # Default: false
  enable-all: false

  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
    - asasalint
    - asciicheck
    - containedctx
    - contextcheck
    - cyclop
    - deadcode
    - decorder
    - depguard
    - dogsled
    - dupl
    - dupword
    - execinquery
    - exhaustive
    - exhaustivestruct
    - exhaustruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocyclo
    - godox
    - goerr113
    - gofumpt
    - goheader
    - golint
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - grouper
    - ifshort
    - interfacebloat
    - interfacer
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - maligned
    - misspell
    - nakedret
    - nestif
    - nilnil
    - noctx
    - nolintlint
    - nonamedreturns
    - nosnakecase
    - paralleltest
    - prealloc
    - promlinter
    - revive
    - rowserrcheck
    - scopelint
    - sqlclosecheck
    - structcheck
    - stylecheck
    - tagliatelle
    - testableexamples
    - testpackage
    - tparallel
    - varcheck
    - varnamelen
    - wastedassign
    - wsl

  # Enable presets.
  # https://golangci-lint.run/usage/linters
  presets: []

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: false

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  exclude: []

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - errcheck
        - gosec

    - path: test_setup\.go
      linters:
        - errcheck
        - gosec

    - path: handler_*
      linters:
        - gci
        - gofmt
        - goimports

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    # `/` will be replaced by current OS file path separator to properly work on Windows.
#    - path: internal/hmac/
#      text: "weak cryptographic primitive"
#      linters:
#        - gosec

    # Exclude some `staticcheck` messages.
#    - linters:
#        - staticcheck
#      text: "SA9003:"

    # Exclude `lll` issues for long lines with `go:generate`.
#    - linters:
#        - lll
#      source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  exclude-use-default: true

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # https://golangci-lint.run/usage/false-positives/#default-exclusions
  # Default: []
  include:
    - EXC0001
    - EXC0002
    - EXC0003
    - EXC0004
    - EXC0005
    - EXC0006
    - EXC0007
    - EXC0008
    - EXC0009
    - EXC0010
    - EXC0011
    - EXC0012
    - EXC0013
    - EXC0014
    - EXC0015

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  new: false

  # Show only new issues created after git revision `REV`.
  new-from-rev:

  # Show only new issues created in git patch with set file path.
  new-from-patch:

  # Fix found issues (if it's supported by the linter).
  fix: false

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  default-severity: warning

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: false

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules: []